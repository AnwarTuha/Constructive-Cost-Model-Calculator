/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package readcode;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Math.pow;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author AnX
 */
public class ReadFile extends javax.swing.JFrame {

    /**
     * Creates new form ReadFile
     */
    public ReadFile() {
        super("                                                                                                                                                              CoCoMo Calculator");
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgPanel = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        browse = new javax.swing.JButton();
        run = new javax.swing.JButton();
        pathField = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        linesOfCode = new javax.swing.JLabel();
        softwareClass = new javax.swing.JLabel();
        developmentTime = new javax.swing.JLabel();
        peopleRequired = new javax.swing.JLabel();
        productivity = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        effort = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        businessRequirement = new javax.swing.JLabel();
        functionalRequirement = new javax.swing.JLabel();
        detailedDesign = new javax.swing.JLabel();
        codeTest = new javax.swing.JLabel();
        systemTesting = new javax.swing.JLabel();
        acceptanceTesting = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        madeBy = new javax.swing.JMenuItem();
        help = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(1015, 501));

        sidePanel.setBackground(new java.awt.Color(56, 105, 126));

        jPanel2.setBackground(new java.awt.Color(59, 60, 64));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/readcode/images/icons8_Calculator_48px_1.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("CoCoMo Calculator");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(74, 74, 74))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        browse.setBackground(new java.awt.Color(59, 60, 64));
        browse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/readcode/images/icons8_Plus_48px_2.png"))); // NOI18N
        browse.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        browse.setContentAreaFilled(false);
        browse.setOpaque(true);
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        run.setBackground(new java.awt.Color(59, 60, 64));
        run.setIcon(new javax.swing.ImageIcon(getClass().getResource("/readcode/images/icons8_Play_48px.png"))); // NOI18N
        run.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        run.setContentAreaFilled(false);
        run.setOpaque(true);
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        save.setBackground(new java.awt.Color(59, 60, 64));
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/readcode/images/icons8_Downloads_Folder_52px_1.png"))); // NOI18N
        save.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        save.setContentAreaFilled(false);
        save.setOpaque(true);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        console.setEditable(false);
        console.setBackground(new java.awt.Color(0, 0, 0));
        console.setColumns(20);
        console.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        console.setForeground(new java.awt.Color(255, 255, 255));
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addContainerGap(138, Short.MAX_VALUE)
                .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(run, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pathField, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(run, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(browse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(18, 86, 104));

        jPanel3.setBackground(new java.awt.Color(59, 60, 64));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 734, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Result");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Lines of Code (KLOC) : ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Software Class : ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Development Time : ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("People Required : ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Productivity : ");

        linesOfCode.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        linesOfCode.setForeground(new java.awt.Color(102, 255, 51));
        linesOfCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linesOfCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        softwareClass.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        softwareClass.setForeground(new java.awt.Color(102, 255, 51));
        softwareClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        softwareClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        developmentTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        developmentTime.setForeground(new java.awt.Color(102, 255, 51));
        developmentTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        developmentTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        peopleRequired.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        peopleRequired.setForeground(new java.awt.Color(102, 255, 51));
        peopleRequired.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        peopleRequired.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        productivity.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        productivity.setForeground(new java.awt.Color(102, 255, 51));
        productivity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productivity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Effort : ");

        effort.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        effort.setForeground(new java.awt.Color(102, 255, 51));
        effort.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        effort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Definition Phase");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Delivery Phase");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Business Requirement");
        jLabel12.setToolTipText("");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Functional Requirment");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Detailed Design");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Code and Unit Test");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("System Testing");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("User Acceptance Testing");

        businessRequirement.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        businessRequirement.setForeground(new java.awt.Color(255, 255, 255));
        businessRequirement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        businessRequirement.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        functionalRequirement.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        functionalRequirement.setForeground(new java.awt.Color(255, 255, 255));
        functionalRequirement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionalRequirement.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        detailedDesign.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        detailedDesign.setForeground(new java.awt.Color(255, 255, 255));
        detailedDesign.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        detailedDesign.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        codeTest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        codeTest.setForeground(new java.awt.Color(255, 255, 255));
        codeTest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codeTest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        codeTest.setMaximumSize(new java.awt.Dimension(105, 16));
        codeTest.setMinimumSize(new java.awt.Dimension(105, 16));

        systemTesting.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        systemTesting.setForeground(new java.awt.Color(255, 255, 255));
        systemTesting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        systemTesting.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        acceptanceTesting.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        acceptanceTesting.setForeground(new java.awt.Color(255, 255, 255));
        acceptanceTesting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        acceptanceTesting.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linesOfCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(softwareClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(developmentTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(peopleRequired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productivity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(effort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(functionalRequirement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(businessRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detailedDesign, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(codeTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(systemTesting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(acceptanceTesting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(linesOfCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(softwareClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(developmentTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(peopleRequired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(productivity, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(effort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(detailedDesign, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(codeTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(jLabel15)))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(systemTesting, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                                .addGap(152, 152, 152))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(acceptanceTesting, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(businessRequirement, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(functionalRequirement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(560, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout bgPanelLayout = new javax.swing.GroupLayout(bgPanel);
        bgPanel.setLayout(bgPanelLayout);
        bgPanelLayout.setHorizontalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgPanelLayout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        bgPanelLayout.setVerticalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        file.setText("File");

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        file.add(openFile);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Save Report");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        file.add(saveFile);

        menuBar.add(file);

        jMenu2.setText("Help");

        madeBy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        madeBy.setText("Developed By");
        madeBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                madeByActionPerformed(evt);
            }
        });
        jMenu2.add(madeBy);

        help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        jMenu2.add(help);

        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    static String path;
    static double lineNum = 0;
    double effortCalculate, time, product;
    double staff;
    static String type = ".java";
    //  declare constants in a multi-dimensional array
    double[][] table = {
        {2.4, 1.05, 2.5, 0.38},
        {3.0, 1.12, 2.5, 0.35},
        {3.6, 1.20, 2.5, 0.32}
    };
    int model;

    // declare software class in a multi-dimensional array
    String[][] mode = {
        {"Organic"},
        {"Semi-detached"},
        {"Embedded"}
    };


    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        type = ".java";
        console.setText(console.getText() + "\n--browsing Started--\n");

        // start file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Java File", "java"));
        //chooser.addChoosableFileFilter(new FileNameExtensionFilter("Java File","java"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C++ file", "cpp"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C file", "c"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C-sharp file", "cs"));
        ///chooser.setFileFilter(new MyFilter());
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                String x = chooser.getFileFilter().getDescription() + "";
                type = "";
                if (null != x) //chooser.resetChoosableFileFilters();
                {
                    switch (x) {
                        case "C++ file":
                            type = ".cpp";
                            break;
                        case "Java File":
                            type = ".java";
                            break;
                        case "C file":
                            type = ".c";
                            break;
                        case "C-sharp file":
                            type = ".cs";
                            break;
                        default:
                            break;
                    }
                }
                System.out.println(x);
                System.out.println(type);
            }
        });
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println(type + "from browse");
            //pathField.setText(chooser.getSelectedFile().getAbsolutePat
            path = chooser.getSelectedFile().getAbsolutePath();
            console.setText(console.getText() + "--file selected--path-- " + path + "\n");
            softwareClass.setText("");
            effort.setText("");
            developmentTime.setText("");
            peopleRequired.setText("");
            productivity.setText("");
            linesOfCode.setText("");

            businessRequirement.setText("");
            functionalRequirement.setText("");

            detailedDesign.setText("");
            codeTest.setText("");
            systemTesting.setText("");
            acceptanceTesting.setText("");
            pathField.setText(path);
        }

    }//GEN-LAST:event_browseActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        BufferedReader bReader = null;
        System.out.println(type + "from run");
        // check if file path exists
        if ("".equals(pathField.getText()) || !(new File(pathField.getText()).exists()) && !(new File(pathField.getText()).isDirectory())) {
            console.setText(console.getText() + "--please select a valid file first--" + "\n");
            JOptionPane.showMessageDialog(new JFrame("Error"), "Please fill the path field Correctly");
            softwareClass.setText("");
            effort.setText("");
            developmentTime.setText("");
            peopleRequired.setText("");
            productivity.setText("");
            linesOfCode.setText("");

            businessRequirement.setText("");
            functionalRequirement.setText("");

            detailedDesign.setText("");
            codeTest.setText("");
            systemTesting.setText("");
            acceptanceTesting.setText("");
        } else {
            console.setText(console.getText() + "--processing file--" + "\n");
            path = pathField.getText();
            try {
                // reset values of count and lineNum for new run
                lineNum = 0;

                // fetch files through stream
                Path pth = Paths.get(path);
                Stream<Path> subPath = Files.walk(pth, 4);
                System.out.println(type);
                Object[] arr = subPath.filter(s -> s.toString().endsWith(type)).toArray();

                // count lines of each file selected in browse
                for (Object arr1 : arr) {
                    BufferedReader in = new BufferedReader(new FileReader(new File(arr1 + "")));
                    console.setText(console.getText() + "--files found--" + arr1 + "\n");
                    ReadCode.count = 0;
                    lineNum += ReadCode.getNumberOfLines(in);
                    console.setText(console.getText() + "--LOC of " + new File(arr1 + "").getName() + "--" + ReadCode.getNumberOfLines(in) + "\n");
                }
                console.setText(console.getText() + "--total lines of code--" + lineNum + "\n");
                console.setText(console.getText() + "--reading successful--" + "\n");

                // check for software class
                if ((lineNum / 1000) >= 2 && (lineNum / 1000) <= 50) {
                    model = 0;
                } else if ((lineNum / 1000) > 50 && (lineNum / 1000) < 300) {
                    model = 1;
                } else if ((lineNum / 1000) >= 300) {
                    model = 2;
                }

                // calculate effort, time, people required and productivity of software
                effortCalculate = (table[model][0] * pow((lineNum / 1000), table[model][1]));
                time = (table[model][2] * pow(effortCalculate, table[model][3]));
                staff = (effortCalculate / time);
                product = ((lineNum / 1000) / effortCalculate);

                if (!(Double.isNaN(product))) {
                    softwareClass.setText(Arrays.toString(mode[model]) + "");
                    effort.setText(effortCalculate + " Man-Months");
                    developmentTime.setText(time + " Months");
                    peopleRequired.setText(staff + " People");
                    productivity.setText(product + " KLOC/Man-Months");
                    linesOfCode.setText("" + (lineNum / 1000));

                    businessRequirement.setText("" + (effortCalculate * (0.06)));
                    functionalRequirement.setText("" + (effortCalculate * (0.1)));

                    detailedDesign.setText("" + (effortCalculate * (0.14)));
                    codeTest.setText("" + (effortCalculate * (0.4)));
                    systemTesting.setText("" + (effortCalculate * (0.2)));
                    acceptanceTesting.setText("" + (effortCalculate * (0.1)));
                } else {
                    pathField.setText("");
                    softwareClass.setText("");
                    effort.setText("");
                    developmentTime.setText("");
                    peopleRequired.setText("");
                    productivity.setText("");
                    linesOfCode.setText("");

                    businessRequirement.setText("");
                    functionalRequirement.setText("");

                    detailedDesign.setText("");
                    codeTest.setText("");
                    systemTesting.setText("");
                    acceptanceTesting.setText("");
                }
            } catch (IOException ex) {
                Logger.getLogger(ReadFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_runActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if ("".equals(pathField.getText())){
            JOptionPane.showMessageDialog(null, "Please select a file to be read first");
        } else {
        FileWriter fw = null;
        try {
            File file = new File(System.getProperty("user.home"), "/Desktop/Report.txt");
            if (!file.exists()) {
                file.createNewFile();
            }
            fw = new FileWriter(file.getAbsoluteFile());
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("\t\tReport on the files currently processed\n");
                bw.write("\t\t=======================================\n");
                Path pth = Paths.get(path);
                Stream<Path> subPath = Files.walk(pth);
                Object[] arr = subPath.filter(s -> s.toString().endsWith(".java")).toArray();
                for (int i = 0; i < arr.length; i++) {
                    ReadCode.count = 0;
                    BufferedReader reader = new BufferedReader(new FileReader(new File(arr[i] + "")));
                    bw.write("\n\t\tFile-Name: " + arr[i]);
                    bw.write("\n\t\tLines of Code of " + new File(arr[i] + "").getName() + ": " + ReadCode.getNumberOfLines(reader));
                    bw.write("\n");
                }
                bw.write("\n\t\tEffort: " + effortCalculate);
                bw.write("\n\t\tDevelopment Time: " + time);
                bw.write("\n\t\tStaff number needed: " + staff);
                bw.write("\n\t\tProductivity: " + product);
                bw.write("\n\t\tSoftware Class: " + table[model]);
                //bw.write("\t\tFile-Name: ");
                console.setText(console.getText() + "--file saved to desktop--\n");
            }
            JOptionPane.showMessageDialog(null, "Report Saved!");
        } catch (IOException ex) {
            Logger.getLogger(ReadFile.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        if ("".equals(pathField.getText())){
            JOptionPane.showMessageDialog(null, "Please select a file to be read first");
        } else {
        FileWriter fw = null;
        try {
            File file = new File(System.getProperty("user.home"), "/Desktop/Report.txt");
            if (!file.exists()) {
                file.createNewFile();
            }
            fw = new FileWriter(file.getAbsoluteFile());
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("\t\tReport on the files currently processed\n");
                bw.write("\t\t=======================================\n");
                Path pth = Paths.get(path);
                Stream<Path> subPath = Files.walk(pth);
                Object[] arr = subPath.filter(s -> s.toString().endsWith(".java")).toArray();
                for (int i = 0; i < arr.length; i++) {
                    ReadCode.count = 0;
                    BufferedReader reader = new BufferedReader(new FileReader(new File(arr[i] + "")));
                    bw.write("\n\t\tFile-Name: " + arr[i]);
                    bw.write("\n\t\tLines of Code of " + new File(arr[i] + "").getName() + ": " + ReadCode.getNumberOfLines(reader));
                    bw.write("\n");
                }
                bw.write("\n\t\tEffort: " + effortCalculate);
                bw.write("\n\t\tDevelopment Time: " + time);
                bw.write("\n\t\tStaff number needed: " + staff);
                bw.write("\n\t\tProductivity: " + product);
                bw.write("\n\t\tSoftware Class: " + table[model]);
                //bw.write("\t\tFile-Name: ");
                console.setText(console.getText() + "--file saved to desktop--\n");
            }
            JOptionPane.showMessageDialog(null, "Report Saved!");
        } catch (IOException ex) {
            Logger.getLogger(ReadFile.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(ReadFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
       type = ".java";
        console.setText(console.getText() + "\n--browsing Started--\n");

        // start file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Java File", "java"));
        //chooser.addChoosableFileFilter(new FileNameExtensionFilter("Java File","java"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C++ file", "cpp"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C file", "c"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("C-sharp file", "cs"));
        ///chooser.setFileFilter(new MyFilter());
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                String x = chooser.getFileFilter().getDescription() + "";
                type = "";
                if (null != x) //chooser.resetChoosableFileFilters();
                {
                    switch (x) {
                        case "C++ file":
                            type = ".cpp";
                            break;
                        case "Java File":
                            type = ".java";
                            break;
                        case "C file":
                            type = ".c";
                            break;
                        case "C-sharp file":
                            type = ".cs";
                            break;
                        default:
                            break;
                    }
                }
                System.out.println(x);
                System.out.println(type);
            }
        });
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println(type + "from browse");
            //pathField.setText(chooser.getSelectedFile().getAbsolutePat
            path = chooser.getSelectedFile().getAbsolutePath();
            console.setText(console.getText() + "--file selected--path-- " + path + "\n");
            softwareClass.setText("");
            effort.setText("");
            developmentTime.setText("");
            peopleRequired.setText("");
            productivity.setText("");
            linesOfCode.setText("");

            businessRequirement.setText("");
            functionalRequirement.setText("");

            detailedDesign.setText("");
            codeTest.setText("");
            systemTesting.setText("");
            acceptanceTesting.setText("");
            pathField.setText(path);
        }

    }//GEN-LAST:event_openFileActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        help help = new help();
        help.setDefaultCloseOperation(help.DISPOSE_ON_CLOSE);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        help.setLocation(dim.width / 2 - help.getSize().width / 2, dim.height / 2 - help.getSize().height / 2);
        help.setVisible(true);
    }//GEN-LAST:event_helpActionPerformed

    private void madeByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_madeByActionPerformed
        developedBy dBy = new developedBy();
        dBy.setDefaultCloseOperation(dBy.DISPOSE_ON_CLOSE);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        dBy.setLocation(dim.width / 2 - dBy.getSize().width / 2, dim.height / 2 - help.getSize().height / 2);
        dBy.setVisible(true);
    }//GEN-LAST:event_madeByActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // set icon for Jframe
                JFrame.setDefaultLookAndFeelDecorated(true);
                new ReadFile().setIconImage(new ImageIcon(
                        getClass().getResource("src/slime.png")).getImage());
                new ReadFile().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel acceptanceTesting;
    private javax.swing.JPanel bgPanel;
    private javax.swing.JButton browse;
    private javax.swing.JLabel businessRequirement;
    private javax.swing.JLabel codeTest;
    private javax.swing.JTextArea console;
    private javax.swing.JLabel detailedDesign;
    private javax.swing.JLabel developmentTime;
    private javax.swing.JLabel effort;
    private javax.swing.JMenu file;
    private javax.swing.JLabel functionalRequirement;
    private javax.swing.JMenuItem help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel linesOfCode;
    private javax.swing.JMenuItem madeBy;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JTextField pathField;
    private javax.swing.JLabel peopleRequired;
    private javax.swing.JLabel productivity;
    private javax.swing.JButton run;
    private javax.swing.JButton save;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JLabel softwareClass;
    private javax.swing.JLabel systemTesting;
    // End of variables declaration//GEN-END:variables
}

class MyFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File f) {
        String fileName = f.getName();
        return fileName.endsWith(".java") || fileName.endsWith(".cs") || fileName.endsWith(".cpp") || fileName.endsWith(".c");
    }

    @Override
    public String getDescription() {
        return "" + "*.java" + "*.cs" + "*.cpp" + "*.c";
    }

}
